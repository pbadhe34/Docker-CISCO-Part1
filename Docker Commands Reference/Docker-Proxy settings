Configure APT proxy settings  for client acess

Add proxy in /etc/apt/apt.conf file
 If the file does not exist, create it. Do not confuse it with apt.conf.d directory.


add following lines in the dockerfile
ENV http_proxy=http://10.1.3.1:8080 
ENV https_proxy=http://10.1.3.1:8080 


Acquire::http::proxy "http://10.1.3.1:8080/";

for the specified command only, use (as root):

http_proxy=http://10.1.3.1:8080 apt-get update

The file:

/etc/environment

Is the correct place to specify system-wide environment variables that should be available to all processes.


https://docs.docker.com/network/proxy/

Configure Docker to use a proxy server
 

If your container needs to use an HTTP, HTTPS, or FTP proxy server, you can configure it in different ways:

    In Docker 17.07 and higher, you can configure the Docker client to pass proxy information to containers automatically.

    In Docker 17.06 and lower, you must set appropriate environment variables within the container. You can do this when you build the image (which makes the image less portable) or when you create or run the container.

Configure the Docker client

    On the Docker client, create or edit the file ~/.docker/config.json in the home directory of the user which starts containers. Add JSON such as the following, substituting the type of proxy with httpsProxy or ftpProxy if necessary, and substituting the address and port of the proxy server. You can configure multiple proxy servers at the same time.

    You can optionally exclude hosts or ranges from going through the proxy server by setting a noProxy key to one or more comma-separated IP addresses or hosts. Using the * character as a wildcard is supported, as shown in this example.

    {
     "proxies":
     {
       "default":
       {
         "httpProxy": "http://127.0.0.1:3001",
         "noProxy": "*.test.example.com,.example2.com"
       }
     }
    }

    Save the file.

    When you create or start new containers, the environment variables are set automatically within the container.

Use environment variables
Set the environment variables manually

When you build the image, or using the --env flag when you create or run the container, you can set one or more of the following variables to the appropriate value. This method makes the image less portable, so if you have Docker 17.07 or higher, you should configure the Docker client instead.
Variable 	Dockerfile example 	docker run Example
HTTP_PROXY 	ENV HTTP_PROXY "http://127.0.0.1:3001" 	--env HTTP_PROXY="http://127.0.0.1:3001"
HTTPS_PROXY 	ENV HTTPS_PROXY "https://127.0.0.1:3001" 	--env HTTPS_PROXY="https://127.0.0.1:3001"
FTP_PROXY 	ENV FTP_PROXY "ftp://127.0.0.1:3001" 	--env FTP_PROXY="ftp://127.0.0.1:3001"
NO_PROXY 	ENV NO_PROXY "*.test.example.com,.example2.com" 	--env NO_PROXY="*


https://www.thegeekdiary.com/how-to-configure-docker-to-use-proxy/

configure docker to use proxy


A proxy is required when the server running Docker does not have direct access to the Internet. Configure the Docker daemon to use a proxy server to access images stored on the official Docker Hub Registry or 3rd-party registries. There are 2 ways to configure the proxy for docker :

    Configuring proxy variables in the /etc/sysconfig/docker file
    Configuring environment variables

Method 1 : Configuring proxy variables in the /etc/sysconfig/docker file

1. Add following configuration in /etc/sysconfig/docker file:

# cat /etc/sysconfig/docker
export HTTP_PROXY="http://USERNAME:PASSWORD@[your.proxy.server]:[port]"
export HTTPS_PROXY="https://USERNAME:PASSWORD@[your.proxy.server]:[port]"

For example :

# cat /etc/sysconfig/docker
HTTP_PROXY="http://user01:password@10.10.10.10:8080"
HTTPS_PROXY="https://user01:password@10.10.10.10:8080"

2. Restart the Docker daemon after setting up the proxy.

# service docker restart


Method 2 : Configuring environment variables

1. Create a drop-in

# mkdir /etc/systemd/system/docker.service.d

2. Create a file with name /etc/systemd/system/docker.service.d/http-proxy.conf that adds the HTTP_PROXY environment variable:

[Service]
Environment="HTTP_PROXY=http://user01:password@10.10.10.10:8080/"
Environment="HTTPS_PROXY=https://user01:password@10.10.10.10:8080/"
Environment="NO_PROXY= hostname.example.com,172.10.10.10"

3. reload the systemd daemon

# systemctl daemon-reload

4. restart docker

# systemctl restart docker

5. Verify that the configuration has been loaded:

# systemctl show docker --property Environment
Environment=GOTRACEBACK=crash HTTP_PROXY=http://10.10.10.10:8080/ HTTPS_PROXY=http://10.10.10.10:8080/ NO_PROXY= hostname.example.com,172.10.10.10
 

    






Configyre proxy server for Docker Daemon to download files from Internet

Docker uses the HTTP_PROXY environment variable if present, for example:

sudo HTTP_PROXY=http://192.168.1.1:3128/ docker pull busybox


locally-bound proxy like localhost,127.0.01  doesn't work.



create a systemd drop-in directory for the docker service:

mkdir /etc/systemd/system/docker.service.d

Now create a file called /etc/systemd/system/docker.service.d/http-proxy.conf that adds the HTTP_PROXY environment variable:

[Service]
Environment="HTTP_PROXY=http://proxy.example.com:80/"

f you have internal Docker registries that you need to contact without proxying you can specify them via the NO_PROXY environment variable:

Environment="HTTP_PROXY=http://proxy.example.com:80/"
Environment="NO_PROXY=localhost,127.0.0.0/8,docker-registry.somecorporation.com

Flush changes:

$ sudo systemctl daemon-reload

Verify that the configuration has been loaded:

$ sudo systemctl show --property Environment docker
Environment=HTTP_PROXY=http://proxy.example.com:80/

Restart Docker Daemon

$ sudo systemctl restart docker

To restart docker:

sudo service docker restart



 look at your /etc/default/docker  file

In the file /etc/default/docker, OR 
/etc/sysconfig/docker)
Add the line:

export http_proxy='http://<host>:<port>'

HTTPS_PROXY="https://<user>:<password>@<proxy-host>:<proxy-port>"
HTTP_PROXY="https://<user>:<password>@<proxy-host>:<proxy-port>"
export HTTP_PROXY="https://<user>:<password>@<proxy-host>:<proxy-port>"
export HTTPS_PROXY="https://<user>:<password>@<proxy-host>:<proxy-port>"


Restart Docker

sudo service docker restart

In the new version of docker, docker-engine, in a systemd based distro,
 you should add the environment variable line to /lib/systemd/system/docker.service, as it is mentioned by others:

Environment="HTTP_PROXY=http://hostname_or_ip:port/"



with curl in docker build, add the following inside the Dockerfile:

ENV http_proxy=http://infoprx2:8080
ENV https_proxy=http://infoprx2:8080
RUN apt-get update && apt-get install -y curl vim

to make the docker daemon able to access the internet (I use kitematic with boot2docker), 
add  the following into /var/lib/boot2docker/profile :

export HTTP_PROXY=http://infoprx2:8080
export HTTPS_PROXY=http://infoprx2:8080

Then restart docker with sudo /etc/init.d/docker restart


need to set up lowercase variables. In my case, my /etc/systemd/system/docker.service.d/http-proxy.conf file is look like this:

[Service]
Environment="ftp_proxy=http://<user>:<password>@<proxy_ip>:<proxy_port>/"
Environment="http_proxy=http://<user>:<password>@<proxy_ip>:<proxy_port>/"
Environment="https_proxy=http://<user>:<password>@<proxy_ip>:<proxy_port>/"

on Ubuntu,

execute this command :

export https_proxy=http://your_name:password@ip_proxy:port docker 

and reload Docker with :

service docker.io restart



Open "/etc/systemd/system/docker.service" and I had to add within the section

    [Service]

    EnvironmentFile=-/etc/sysconfig/docker

Only then the file "etc/sysconfig/docker" gets loaded.


 
